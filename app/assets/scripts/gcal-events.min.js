// code from http://www.codehandling.com/2013/03/your-google-calendar-events-now-on-your.html
// heavily modified to fit in with the bootstrap theme

var dateLowerlimit = "";
var tokenArray = ["start", "init"];
var tokenIndex = 1;

function getDateLowerLimit() {
    var todayDate;
    if (dateLowerlimit == "") {
        todayDate = new Date();
        dateLowerlimit = todayDate.getFullYear() + "-" + (todayDate.getMonth() < 10 ? '0' : '') + (todayDate.getMonth() + 1) + "-" + (todayDate.getDate() < 10 ? '0' : '') + todayDate.getDate() + "T00:00:00+00:00";
    } else {
        todayDate = new Date(dateLowerlimit)
    }
}

function getDate(dateTime, withMonth) {
    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var dd = new Date(dateTime);
    if(withMonth) {
        return monthNames[dd.getMonth()] + " " + dd.getDate() ;
    }
    return dd.getDate();
}

function getTime(dateTime) {
    var dd = new Date(dateTime);
    return dd.getHours() + ":" + (dd.getMinutes() < 10 ? '0' : '') + dd.getMinutes();
}

$(window).load(function() {
    loadTumbo()
});

function loadTumbo() {
    var apiPostURL = "https://www.googleapis.com/calendar/v3/calendars/" + googleCalendarId + "/events";
    $('#gcal').empty().append('loading ...');
    getDateLowerLimit();
    var dataBox = {
        orderBy: "startTime",
        singleEvents: "true",
        timeMin: dateLowerlimit,
        fields: "items,nextPageToken",
        key: googleCalendarApiKey,
        maxResults: maxGcalEvents
    };
    pageToken = tokenArray[tokenIndex];
    if (null == pageToken || pageToken == "undefined" || pageToken == "") {
        $('#gcal').empty().append('Error .. Reload page!');
        return
    }
    if (pageToken == "init") {
        callAPI(apiPostURL, dataBox)
    } else if (pageToken == "start") {
    } else if (pageToken == "end") {
    } else {
        dataBox['pageToken'] = pageToken;
        callAPI(apiPostURL, dataBox)
    }
}

function callAPI(apiPostURL, dataBox) {
    $.ajax({
        url: apiPostURL,
        type: "GET",
        data: dataBox,
        async: true,
        cache: true,
        dataType: "jsonp",
        success: function(data) {
            showTumbo(data)
        },
        error: function(html) {
            alert(html)
        },
        beforeSend: setHeader
    })
}

function showTumbo(data) {
    var eventArray = data.items;
    var eventsByDate;

    if (tokenIndex == (tokenArray.length - 1)) {
        tokenArray.push((null == data.nextPageToken) ? "end" : data.nextPageToken)
    }

    eventHTML = "";
    // var previousDate = 0;

    // processing event array:
    // - add .startDate and .startTime to each event
    // - group events into eventsByDate by .startDate

    // assumptions:
    // - events are already in order of earlier dates coming first and later dates coming later. (that is, date-time ascending.)

    eventsByDate = eventArray
        // First, normalize the event objects to have useful display information.
        .map(function(event) {
            var eventStart = event.start.date || event.start.dateTime;
            var eventEnd = event.end.date || event.end.dateTime;

            return {
                start: eventStart,
                startDate: getDate(eventStart, true),
                startTime: getTime(eventStart),
                end: eventEnd, // unused?
                summary: event.summary,
                description: event.description, // unused?
                htmlLink: event.htmlLink,
                location: event.location // unused?
            };
        })
        // Second, group event objects by date.
        .reduce(function(eventsByDate, event) {
            var previousEventDate, possiblePreviousEventDates;

            // Array#find was only added in more recent JS versions for arcane reasons.
            possiblePreviousEventDates = eventsByDate.filter(function(eventDate) {
                return eventDate.startDate == event.startDate;
            });

            if(possiblePreviousEventDates.length > 0) {
                // There should be only one... but just in case.
                previousEventDate = possiblePreviousEventDates[ possiblePreviousEventDates.length - 1 ];
            }
            else {
                previousEventDate = {
                    start: event.start,
                    startDate: event.startDate,
                    events: []
                };

                eventsByDate.push(previousEventDate);
            }

            previousEventDate.events.push(event);

            return eventsByDate;
        }, [] )
        ;

    eventHTML = require('scripts/gcal-table')({
        eventsByDate: eventsByDate
    });
    
    $('#gcal').empty().append(eventHTML);
}

function setHeader(xhr) {
    if (xhr && xhr.overrideMimeType) {
        xhr.overrideMimeType("application/j-son;charset=UTF-8")
    }
}
